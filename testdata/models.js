//@flow

// DO NOT EDIT -- automatically generated by goflow

// Errors should be an array of strings
export type Errors = Array<string>

// MapKeyPtr is a string pointer key
export type MapKeyPtr = { [key: ?string]: Animal }

// MapKeyValPtr is a string pointer key
export type MapKeyValPtr = { [key: ?string]: ?Animal }

// MapNoPtr is a map of string to Animal, no pointer
export type MapNoPtr = { [key: string]: Animal }

// MapNumPtr should transform int64 to number
export type MapNumPtr = { [key: number]: Animal }

// MapValPtr is a string pointer value
export type MapValPtr = { [key: string]: ?Animal }

// Payrate should be a number
export type Payrate = number

// People should be an array of Person
export type People = Array<Person>

// Strings should be an array of strings
export type Strings = Array<string>

// Animal is anything, but should probably have a master
// @strict
export type Animal = {|
	breed: string,
	name: string,
|}

export type EmbeddedAnimal = {
	breed: string,
	name: string,
	some_horse_attrib: string,
	doohickey: string,
	doohickey2: string,	// doohickey two
}

export type EmbeddedAnimal2 = {
	breed: string,
	name: string,
	birthday: string,	// birthday comment
	date: string,
	duration: string,	// a duration
	age: number,
}

export type Horse = {
	some_horse_attrib: string,
	doohickey: string,
	doohickey2: string,	// doohickey two
}

// Maps is for testing maps. These are the hardest part.
// The maps were not fun.
export type Maps = {
	base_map: { [key: string]: Person },
	base_map_ptr_key: { [key: ?string]: Person },
	base_map_ptr_val: { [key: string]: ?Person },
	map_of_slice: { [key: string]: Person },
	slice_of_map_of_slices: Array<Person>,
}

// NoIgnoredComment should NOT be ignored since flowignore is not the only
// thing there
// flowignore will not ignore here
export type NoIgnoredComment = {
	something: string,
}

// Person has many types and should all convert correctly
export type Person = {
	name: string,	// This is a name comment
	age: number,
	StringOverride: String,	// Override `string` with `String`
	age64: number,
	flow_is_awesome: boolean,
	nullable:  ?string,
	animals_array: Array<Animal>,	// I have no pointer
	animals_array_ptr:  ?Array<Animal>,	// I am a pointer
	animals_array_ptr_2: Array<Animal>,	// I hold pointers
	payrate: Payrate,
	hascomma: string,
	some_generator: Generator,
	has_lots_of_tags: string,
	inner_struct: Object,	// I have a comment in a nested struct
	map_data: { [key: string]: number },
}

// TestFlowTags is to test all the possible flow flags
export type TestFlowTags = {
	person: Person,
	persona: Person,
	override_name_b: Person,	// should have new name
	personc: OverrideTypeA,	// should have original name but overriding type
	override_name_d: OverrideTypeB,
	override_name_f: Person,	// should have new name
}

export type Time = {
	the_time: string,
}

export type Whatever = {
	doohickey: string,
	doohickey2: string,	// doohickey two
}

export type Whatever2 = {
	doohickey2: string,	// doohickey two
}

